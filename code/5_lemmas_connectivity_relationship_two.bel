%%% Auxiliary lemmas for Theorem 2.1(ii)

% Type family encoding realisation of a proof keyed label (Definition 2.4).
% As explained in the paper, we encode a type family which is slightly
% stronger than the informal definition.
LF realised: pr_lab → type =
  | rl: std X → fstep X T X' → realised T
;

% Lemma 2.5: every valid proof label is realised
rec pr_lab_is_realised: (g:ctx) [g ⊢ valid T] → [g ⊢ realised T] =
/ total g (pr_lab_is_realised _ _ g) /
fn d ⇒ case d of
  | [g ⊢ v_base] ⇒ [g ⊢ rl (std_pref std_null) (fs_pref std_null)]
  | [g ⊢ v_suml V] ⇒ let [g ⊢ rl D F] = pr_lab_is_realised [g ⊢ V] in [g ⊢ rl (std_sum D std_null) (fs_suml F std_null)]
  | [g ⊢ v_sumr V] ⇒ let [g ⊢ rl D F] = pr_lab_is_realised [g ⊢ V] in [g ⊢ rl (std_sum std_null D) (fs_sumr F std_null)]
  | [g ⊢ v_parl V] ⇒ let [g ⊢ rl D F]:[g ⊢ realised T] = pr_lab_is_realised [g ⊢ V] in
    let [g ⊢ ex_k H] = existence_of_key [g ⊢ T] in
    [g ⊢ rl (std_par D std_null) (fs_parl F H not_null)]
  | [g ⊢ v_parr V] ⇒ let [g ⊢ rl D F]:[g ⊢ realised T] = pr_lab_is_realised [g ⊢ V] in
    let [g ⊢ ex_k H] = existence_of_key [g ⊢ T] in
    [g ⊢ rl (std_par std_null D) (fs_parr F H not_null)]
  | [g ⊢ v_synl V1 V2 L1 H1 L2 H2] ⇒ let [g ⊢ rl D1 F1] = pr_lab_is_realised [g ⊢ V1] in
    let [g ⊢ rl D2 F2] = pr_lab_is_realised [g ⊢ V2] in
    [g ⊢ rl (std_par D1 D2) (fs_synl F1 L1 H1 F2 L2 H2)]
  | [g ⊢ v_synr V1 V2 L1 H1 L2 H2] ⇒ let [g ⊢ rl D1 F1] = pr_lab_is_realised [g ⊢ V1] in
    let [g ⊢ rl D2 F2] = pr_lab_is_realised [g ⊢ V2] in
    [g ⊢ rl (std_par D1 D2) (fs_synr F1 L1 H1 F2 L2 H2)]
;


% The following lemmas build new paths starting from given paths.

% Given a path between X and X', there is a path between X+0 and X'+0
rec step*_sumleft_null: (g:ctx) [g ⊢ step* X X'] → [g ⊢ step* (sum X null) (sum X' null)] =
/ total s (step*_sumleft_null _ _ _ s) /
fn s ⇒ case s of
  | [g ⊢ id_s*] ⇒ [g ⊢ id_s*]
  | [g ⊢ st_s* S] ⇒ (case [g ⊢ S] of
       | [g ⊢ fw F] ⇒ [g ⊢ st_s* (fw (fs_suml F std_null))]
       | [g ⊢ bw B] ⇒ [g ⊢ st_s* (bw (bs_suml B std_null))])
  | [g ⊢ tr_s* S1* S2*] ⇒ let [g ⊢ S1*'] = step*_sumleft_null [g ⊢ S1*] in
    let [g ⊢ S2*'] = step*_sumleft_null [g ⊢ S2*] in [g ⊢ tr_s* S1*' S2*']
;

% Given a path between X and X', there is a path between 0+X and 0+X'
rec step*_sumright_null: (g:ctx) [g ⊢ step* X X'] → [g ⊢ step* (sum null X) (sum null X')] =
/ total s (step*_sumright_null _ _ _ s) /
fn s ⇒ case s of
  | [g ⊢ id_s*] ⇒ [g ⊢ id_s*]
  | [g ⊢ st_s* S] ⇒ (case [g ⊢ S] of
       | [g ⊢ fw F] ⇒ [g ⊢ st_s* (fw (fs_sumr F std_null))]
       | [g ⊢ bw B] ⇒ [g ⊢ st_s* (bw (bs_sumr B std_null))])
  | [g ⊢ tr_s* S1* S2*] ⇒ let [g ⊢ S1*'] = step*_sumright_null [g ⊢ S1*] in
    let [g ⊢ S2*'] = step*_sumright_null [g ⊢ S2*] in [g ⊢ tr_s* S1*' S2*']
;

% Given a path between X and X' and a standard process Y, there is a path between X|Y and X'|Y
rec step*_parleft_std: (g:ctx) [g ⊢ step* X X'] → [g ⊢ std Y] → [g ⊢ step* (par X Y) (par X' Y)] =
/ total s (step*_parleft_std _ _ _ _ s _) /
fn s,d ⇒ case s of
  | [g ⊢ id_s*] ⇒ [g ⊢ id_s*]
  | [g ⊢ st_s* S] ⇒ (case [g ⊢ S] of
       | [g ⊢ fw F]:[g ⊢ step _ T _] ⇒ let [g ⊢ D] = d in
         let [g ⊢ ex_kn _ H N] = no_key_of_prlab_in_std [g ⊢ T] [g ⊢ D] in [g ⊢ st_s* (fw (fs_parl F H N))]
       | [g ⊢ bw B]:[g ⊢ step _ T _] ⇒ let [g ⊢ D] = d in
         let [g ⊢ ex_kn _ H N] = no_key_of_prlab_in_std [g ⊢ T] [g ⊢ D] in [g ⊢ st_s* (bw (bs_parl B H N))])
  | [g ⊢ tr_s* S1* S2*] ⇒ let [g ⊢ S1*'] = step*_parleft_std [g ⊢ S1*] d in
    let [g ⊢ S2*'] = step*_parleft_std [g ⊢ S2*] d in [g ⊢ tr_s* S1*' S2*']
;

% Given a transition between X and X' and a standard process Y, there is a transition between Y|X and Y|X'
rec step*_parright_std: (g:ctx) [g ⊢ step* X X'] → [g ⊢ std Y] → [g ⊢ step* (par Y X) (par Y X')] =
/ total s (step*_parright_std _ _ _ _ s _) /
fn s,d ⇒ case s of
  | [g ⊢ id_s*] ⇒ [g ⊢ id_s*]
  | [g ⊢ st_s* S] ⇒ (case [g ⊢ S] of
       | [g ⊢ fw F]:[g ⊢ step _ T _] ⇒ let [g ⊢ D] = d in
         let [g ⊢ ex_kn _ H N] = no_key_of_prlab_in_std [g ⊢ T] [g ⊢ D] in [g ⊢ st_s* (fw (fs_parr F H N))]
       | [g ⊢ bw B]:[g ⊢ step _ T _] ⇒ let [g ⊢ D] = d in
         let [g ⊢ ex_kn _ H N] = no_key_of_prlab_in_std [g ⊢ T] [g ⊢ D] in [g ⊢ st_s* (bw (bs_parr B H N))])
  | [g ⊢ tr_s* S1* S2*] ⇒ let [g ⊢ S1*'] = step*_parright_std [g ⊢ S1*] d in
    let [g ⊢ S2*'] = step*_parright_std [g ⊢ S2*] d in [g ⊢ tr_s* S1*' S2*']
;


% If a standard process makes a transition F indexed by the key K,
% then any key different than K does not occur in the target of F
rec lemma_fstep_std: (g:ctx) [g ⊢ std X] → [g ⊢ fstep X T Y] →
  [g ⊢ key T M[]] → [g ⊢ neq M[] K[]] → [g ⊢ notin K[] Y] =
/ total d (lemma_fstep_std _ _ _ _ _ _ d _ _ _) /
fn d,f,h,i ⇒ let [g ⊢ I]:[g ⊢ neq _ K[]] = i in
case d of
  | [g ⊢ std_null] ⇒ impossible f
  | [g ⊢ std_pref D] ⇒ let [g ⊢ fs_pref _] = f in
    let [g ⊢ refk] = uniqueness_of_key h [g ⊢ key_base] in
    let [g ⊢ N] = no_key_in_std [⊢ K] [g ⊢ D] in
    let [g ⊢ I] = symmetric_neq i in [g ⊢ not_kpref I N]
  | [g ⊢ std_sum D1 D2] ⇒ (case f of
       | [g ⊢ fs_suml FL _] ⇒ let [g ⊢ key_suml H] = h in
         let [g ⊢ N1] = lemma_fstep_std [g ⊢ D1] [g ⊢ FL] [g ⊢ H] i in
         let [g ⊢ N2] = no_key_in_std [⊢ K] [g ⊢ D2] in [g ⊢ not_sum N1 N2]
       | [g ⊢ fs_sumr FR _] ⇒ let [g ⊢ key_sumr H] = h in
         let [g ⊢ N1] = no_key_in_std [⊢ K] [g ⊢ D1] in
         let [g ⊢ N2] = lemma_fstep_std [g ⊢ D2] [g ⊢ FR] [g ⊢ H] i in [g ⊢ not_sum N1 N2])
  | [g ⊢ std_par D1 D2] ⇒ (case f of
       | [g ⊢ fs_parl F1 _ _] ⇒ let [g ⊢ key_parl H] = h in
         let [g ⊢ N1] = lemma_fstep_std [g ⊢ D1] [g ⊢ F1] [g ⊢ H] i in
         let [g ⊢ N2] = no_key_in_std [⊢ K] [g ⊢ D2] in [g ⊢ not_par N1 N2]
       | [g ⊢ fs_parr F2 _ _] ⇒ let [g ⊢ key_parr H] = h in
         let [g ⊢ N1] = no_key_in_std [⊢ K] [g ⊢ D1] in
         let [g ⊢ N2] = lemma_fstep_std [g ⊢ D2] [g ⊢ F2] [g ⊢ H] i in [g ⊢ not_par N1 N2]
       | [g ⊢ fs_synl F1 _ H1 F2 _ H2] ⇒  let [g ⊢ key_sync H] = h in
         let [g ⊢ refk] = uniqueness_of_key [g ⊢ H] [g ⊢ H1] in
         let [g ⊢ N1] = lemma_fstep_std [g ⊢ D1] [g ⊢ F1] [g ⊢ H1] i in
         let [g ⊢ N2] = lemma_fstep_std [g ⊢ D2] [g ⊢ F2] [g ⊢ H2] i in [g ⊢ not_par N1 N2]
       | [g ⊢ fs_synr F1 _ H1 F2 _ H2] ⇒ let [g ⊢ key_sync H] = h in
         let [g ⊢ refk] = uniqueness_of_key [g ⊢ H] [g ⊢ H1] in
         let [g ⊢ N1] = lemma_fstep_std [g ⊢ D1] [g ⊢ F1] [g ⊢ H1] i in
         let [g ⊢ N2] = lemma_fstep_std [g ⊢ D2] [g ⊢ F2] [g ⊢ H2] i in [g ⊢ not_par N1 N2])
  | [g ⊢ std_nu \a.D] ⇒ let [g ⊢ fs_nu \a.F] = f in
    let [g ⊢ H] = h in
    let [g,a:names ⊢ N] = lemma_fstep_std [g,a:names ⊢ D] [g,a:names ⊢ F] [g,a:names ⊢ H[..]] [g,a:names ⊢ I[..]] in [g ⊢ not_nu \a.N]
;