%%% Properties of keys (nats) %%%

% Predicate expressing equality or inequality:
% eq_or_neq K M holds iff K = M or K != M
LF eq_or_neq: keys → keys → type =
  | c_eq: eq_or_neq K K
  | c_neq: neq K M → eq_or_neq K M
;

% Given two keys, they are either equal or not equal
rec compare: {g:ctx} {K:[⊢ keys]} {M:[⊢ keys]} [g ⊢ eq_or_neq K[] M[]] =
/ total n (compare _ n _) /
mlam g,K,M ⇒ case [⊢ K] of
  | [⊢ z] ⇒ (case [⊢ M] of
     | [⊢ z] ⇒ [_ ⊢ c_eq]
     | [⊢ s M'] ⇒ [_ ⊢ c_neq (nless (lzero M'[]))])
  | [⊢ s K'] ⇒ (case [⊢ M] of
     | [⊢ z] ⇒ [_ ⊢ c_neq (ngreat (lzero K'[]))]
     | [⊢ s M'] ⇒ (case compare [g] [⊢ K'] [⊢ M'] of
        | [g ⊢ c_eq] ⇒ [_ ⊢ c_eq]
        | [g ⊢ c_neq (nless D)] ⇒ [g ⊢ c_neq (nless (lsucc D))]
        | [g ⊢ c_neq (ngreat D)] ⇒ [g ⊢ c_neq (ngreat (lsucc D))]))
;

% Empty type expressing false
LF false: type =
;

% Proof that < is irreflexive (K < K is absurd)
rec irreflexive_less: (g:ctx) [g ⊢ less K[] K[]] → [g ⊢ false] =
/ total l (irreflexive_less _ _ l) /
fn l ⇒ let [g ⊢ lsucc L] = l in irreflexive_less [g ⊢ L]
;

% Proof that inequality of keys is irreflexive (K != K is absurd)
rec irreflexive_neq: (g:ctx) [g ⊢ neq K[] K[]] → [g ⊢ false] =
/ total d (irreflexive_neq _ _ d) /
fn d ⇒ case d of
  | [g ⊢ nless L] ⇒ irreflexive_less [g ⊢ L]
  | [g ⊢ ngreat L] ⇒ irreflexive_less [g ⊢ L]
;

% Proof that inequality of keys is symmetric
rec symmetric_neq: (g:ctx) [g ⊢ neq K[] M[]] → [g ⊢ neq M[] K[]] =
/ total d (symmetric_neq _ _ _ d) /
fn d ⇒ case d of
  | [g ⊢ nless L] ⇒ [g ⊢ ngreat L]
  | [g ⊢ ngreat L] ⇒ [g ⊢ nless L]
;

% Type family encoding the existence of a different key
LF ex_neq: keys → type =
  | ex_n: neq M K → ex_neq K
;

% For all keys K there exists a key M with M != K
rec existence_of_different_key: {g:ctx} {K:[⊢ keys]} [g ⊢ ex_neq K[]] =
/ total n (existence_of_different_key _ n) /
mlam g,K ⇒ case [⊢ K] of
  | [⊢ z] ⇒ [g ⊢ ex_n (ngreat (lzero (s z)))]
  | [⊢ s M] ⇒ (case existence_of_different_key [g] [⊢ M] of
       | [g ⊢ ex_n (nless L)] ⇒ [g ⊢ ex_n (nless (lsucc L))]
       | [g ⊢ ex_n (ngreat L)] ⇒ [g ⊢ ex_n (ngreat (lsucc L))])
;


%%% Existence and uniqueness of a label/key in a proof keyed label

% Existential type denoting existence of a label in a proof keyed label
LF ex_lab: pr_lab → type =
  | ex_l: lab T A → ex_lab T
;

% Proof of existence of a label in a proof keyed label
rec existence_of_lab: (g:ctx) {T:[g ⊢ pr_lab]} [g ⊢ ex_lab T] =
/ total t (existence_of_lab _ t) /
mlam T ⇒ case [_ ⊢ T] of
  | [g ⊢ pr_base _ _] ⇒ [g ⊢ ex_l lab_base]
  | [g ⊢ pr_suml T'] ⇒ let [g ⊢ ex_l L] = existence_of_lab [g ⊢ T'] in [g ⊢ ex_l (lab_suml L)]
  | [g ⊢ pr_sumr T'] ⇒ let [g ⊢ ex_l L] = existence_of_lab [g ⊢ T'] in [g ⊢ ex_l (lab_sumr L)]
  | [g ⊢ pr_parl T'] ⇒ let [g ⊢ ex_l L] = existence_of_lab [g ⊢ T'] in [g ⊢ ex_l (lab_parl L)]
  | [g ⊢ pr_parr T'] ⇒ let [g ⊢ ex_l L] = existence_of_lab [g ⊢ T'] in [g ⊢ ex_l (lab_parr L)]
  | [g ⊢ pr_sync _ _] ⇒ [g ⊢ ex_l lab_sync]
;

% Proof of uniqueness of a label in a proof keyed label
rec uniqueness_of_lab: (g:ctx) [g ⊢ lab T A] → [g ⊢ lab T B] → [g ⊢ eql A B] =
/ total l1 (uniqueness_of_lab _ _ _ _ l1 _) /
fn l1,l2 ⇒ case l1 of
  | [g ⊢ lab_base] ⇒ let [g ⊢ lab_base] = l2 in [g ⊢ refl]
  | [g ⊢ lab_suml L1] ⇒ let [g ⊢ lab_suml L2] = l2 in uniqueness_of_lab [g ⊢ L1] [g ⊢ L2]
  | [g ⊢ lab_sumr L1] ⇒ let [g ⊢ lab_sumr L2] = l2 in uniqueness_of_lab [g ⊢ L1] [g ⊢ L2]
  | [g ⊢ lab_parl L1] ⇒ let [g ⊢ lab_parl L2] = l2 in uniqueness_of_lab [g ⊢ L1] [g ⊢ L2]
  | [g ⊢ lab_parr L1] ⇒ let [g ⊢ lab_parr L2] = l2 in uniqueness_of_lab [g ⊢ L1] [g ⊢ L2]
  | [g ⊢ lab_sync] ⇒ let [g ⊢ lab_sync] = l2 in [g ⊢ refl]
;

% Existential type denoting existence of a key in a proof keyed label
LF ex_key: pr_lab → type =
  | ex_k: key T K → ex_key T
;

% Proof of existence of a key in a proof keyed label
rec existence_of_key: (g:ctx) {T:[g ⊢ pr_lab]} [g ⊢ ex_key T] =
/ total t (existence_of_key _ t) /
mlam T ⇒ case [_ ⊢ T] of
  | [g ⊢ pr_base _ _] ⇒ [g ⊢ ex_k key_base]
  | [g ⊢ pr_suml T'] ⇒ let [g ⊢ ex_k H] = existence_of_key [g ⊢ T'] in [g ⊢ ex_k (key_suml H)]
  | [g ⊢ pr_sumr T'] ⇒ let [g ⊢ ex_k H] = existence_of_key [g ⊢ T'] in [g ⊢ ex_k (key_sumr H)]
  | [g ⊢ pr_parl T'] ⇒ let [g ⊢ ex_k H] = existence_of_key [g ⊢ T'] in [g ⊢ ex_k (key_parl H)]
  | [g ⊢ pr_parr T'] ⇒ let [g ⊢ ex_k H] = existence_of_key [g ⊢ T'] in [g ⊢ ex_k (key_parr H)]
  | [g ⊢ pr_sync T' _] ⇒ let [g ⊢ ex_k H] = existence_of_key [g ⊢ T'] in [g ⊢ ex_k (key_sync H)]
;

% Proof of uniqueness of a key in a proof keyed label
rec uniqueness_of_key: (g:ctx) [g ⊢ key T K[]] → [g ⊢ key T M[]] → [g ⊢ eqk K[] M[]] =
/ total h1 (uniqueness_of_key _ _ _ _ h1 _) /
fn h1,h2 ⇒ case h1 of
  | [g ⊢ key_base] ⇒ let [g ⊢ key_base] = h2 in [g ⊢ refk]
  | [g ⊢ key_suml H1] ⇒ let [g ⊢ key_suml H2] = h2 in uniqueness_of_key [g ⊢ H1] [g ⊢ H2]
  | [g ⊢ key_sumr H1] ⇒ let [g ⊢ key_sumr H2] = h2 in uniqueness_of_key [g ⊢ H1] [g ⊢ H2]
  | [g ⊢ key_parl H1] ⇒ let [g ⊢ key_parl H2] = h2 in uniqueness_of_key [g ⊢ H1] [g ⊢ H2]
  | [g ⊢ key_parr H1] ⇒ let [g ⊢ key_parr H2] = h2 in uniqueness_of_key [g ⊢ H1] [g ⊢ H2]
  | [g ⊢ key_sync H1] ⇒ let [g ⊢ key_sync H2] = h2 in uniqueness_of_key [g ⊢ H1] [g ⊢ H2]
;


%%% Non occurrence of keys in standard processes %%%

% For all keys K, K does not occur in a standard process
rec no_key_in_std: (g:ctx) {K:[⊢ keys]} [g ⊢ std X] → [g ⊢ notin K[] X] =
/ total n (no_key_in_std _ _ _ n) /
mlam K ⇒ fn n ⇒ case n of
  | [g ⊢ std_null] ⇒ [g ⊢ not_null]
  | [g ⊢ std_pref D] ⇒ let [g ⊢ N] = no_key_in_std [⊢ K] [g ⊢ D] in [g ⊢ not_pref N]
  | [g ⊢ std_sum D1 D2] ⇒ let [g ⊢ N1] = no_key_in_std [⊢ K] [g ⊢ D1] in
    let [g ⊢ N2] = no_key_in_std [⊢ K] [g ⊢ D2] in [g ⊢ not_sum N1 N2]
  | [g ⊢ std_par D1 D2] ⇒ let [g ⊢ N1] = no_key_in_std [⊢ K] [g ⊢ D1] in
    let [g ⊢ N2] = no_key_in_std [⊢ K] [g ⊢ D2] in [g ⊢ not_par N1 N2]
  | [g ⊢ std_nu \a.D] ⇒ let [g,a:names ⊢ N] = no_key_in_std [⊢ K] [g,a:names ⊢ D] in [g ⊢ not_nu \a.N]
;

% Given a proof keyed label T and a standard process X, the key of T does not occur in X.
% We need an auxiliary type family to encode the conclusion of this lemma.
LF ex_key_notin: pr_lab → std _ → type =
  | ex_kn: {D:std X} key T K → notin K X → ex_key_notin T D
;

% The key of a proof keyed label does not occur in a standard process:
rec no_key_of_prlab_in_std: (g:ctx) {T:[g ⊢ pr_lab]} {D:[g ⊢ std X]} [g ⊢ ex_key_notin T D] =
/ total t (no_key_of_prlab_in_std _ t _ _) /
mlam T,D ⇒ let [g ⊢ ex_k H] = existence_of_key [_ ⊢ T] in
       let [g ⊢ H]:[g ⊢ key _ K[]] = [g ⊢ H] in
       let [g ⊢ N] = no_key_in_std [⊢ K] [g ⊢ D] in [g ⊢ ex_kn D H N]
;


%%% Properties of transitions %%%

% Loop lemma - first implication
rec loop_lemma_one: (g:ctx) [g ⊢ fstep X T X'] → [g ⊢ bstep X' T X] =
/ total f (loop_lemma_one _ _ _ _ f) /
fn f ⇒  case f of
  | [g ⊢ fs_pref D] ⇒ [g ⊢ bs_pref D]
  | [g ⊢ fs_kpref F H I] ⇒ let [g ⊢ B] = loop_lemma_one [g ⊢ F] in [g ⊢ bs_kpref B H I]
  | [g ⊢ fs_suml F D] ⇒ let [g ⊢ B] = loop_lemma_one [g ⊢ F] in [g ⊢ bs_suml B D]
  | [g ⊢ fs_sumr F D] ⇒ let [g ⊢ B] = loop_lemma_one [g ⊢ F] in [g ⊢ bs_sumr B D]
  | [g ⊢ fs_parl F H N] ⇒ let [g ⊢ B] = loop_lemma_one [g ⊢ F] in [g ⊢ bs_parl B H N]
  | [g ⊢ fs_parr F H N] ⇒ let [g ⊢ B] = loop_lemma_one [g ⊢ F] in [g ⊢ bs_parr B H N]
  | [g ⊢ fs_synl F1 L1 H1 F2 L2 H2] ⇒ let [g ⊢ B1] = loop_lemma_one [g ⊢ F1] in
       let [g ⊢ B2] = loop_lemma_one [g ⊢ F2] in [g ⊢ bs_synl B1 L1 H1 B2 L2 H2]
  | [g ⊢ fs_synr F1 L1 H1 F2 L2 H2] ⇒ let [g ⊢ B1] = loop_lemma_one [g ⊢ F1] in
       let [g ⊢ B2] = loop_lemma_one [g ⊢ F2] in [g ⊢ bs_synr B1 L1 H1 B2 L2 H2]
  | [g ⊢ fs_nu \a.F] ⇒ let [g,a:names ⊢ B] = loop_lemma_one [g,a:names ⊢ F] in [g ⊢ bs_nu \a.B]
;

% Loop lemma - second implication
rec loop_lemma_two: (g:ctx) [g ⊢ bstep X' T X] → [g ⊢ fstep X T X'] =
/ total b (loop_lemma_two _ _ _ _ b) /
fn b ⇒  case b of
  | [g ⊢ bs_pref D] ⇒ [g ⊢ fs_pref D]
  | [g ⊢ bs_kpref B H I] ⇒ let [g ⊢ F] = loop_lemma_two [g ⊢ B] in [g ⊢ fs_kpref F H I]
  | [g ⊢ bs_suml B D] ⇒ let [g ⊢ F] = loop_lemma_two [g ⊢ B] in [g ⊢ fs_suml F D]
  | [g ⊢ bs_sumr B D] ⇒ let [g ⊢ F] = loop_lemma_two [g ⊢ B] in [g ⊢ fs_sumr F D]
  | [g ⊢ bs_parl B H N] ⇒ let [g ⊢ F] = loop_lemma_two [g ⊢ B] in [g ⊢ fs_parl F H N]
  | [g ⊢ bs_parr B H N] ⇒ let [g ⊢ F] = loop_lemma_two [g ⊢ B] in [g ⊢ fs_parr F H N]
  | [g ⊢ bs_synl B1 L1 H1 B2 L2 H2] ⇒ let [g ⊢ F1] = loop_lemma_two [g ⊢ B1] in
       let [g ⊢ F2] = loop_lemma_two [g ⊢ B2] in [g ⊢ fs_synl F1 L1 H1 F2 L2 H2]
  | [g ⊢ bs_synr B1 L1 H1 B2 L2 H2] ⇒ let [g ⊢ F1] = loop_lemma_two [g ⊢ B1] in
       let [g ⊢ F2] = loop_lemma_two [g ⊢ B2] in [g ⊢ fs_synr F1 L1 H1 F2 L2 H2]
  | [g ⊢ bs_nu \a.B] ⇒ let [g,a:names ⊢ F] = loop_lemma_two [g,a:names ⊢ B] in [g ⊢ fs_nu \a.F]
;

% Proof that step is symmetric
rec symmetric_step: (g:ctx) [g ⊢ step X T Y] → [g ⊢ step Y T X] =
/ total s (symmetric_step _ _ _ s) /
fn s ⇒ case s of
    | [g ⊢ fw F] ⇒ let [g ⊢ B] = loop_lemma_one [g ⊢ F] in [g ⊢ bw B]
    | [g ⊢ bw B] ⇒ let [g ⊢ F] = loop_lemma_two [g ⊢ B] in [g ⊢ fw F]
;

% Proof that step* is symmetric
rec symmetric_step*: (g:ctx) [g ⊢ step* X Y] → [g ⊢ step* Y X] =
/ total s (symmetric_step* _ _ _ s) /
fn s ⇒ case s of
  | [g ⊢ id_s*] ⇒ [g ⊢ id_s*]
  | [g ⊢ st_s* S] ⇒ let [g ⊢ S'] = symmetric_step [g ⊢ S] in [g ⊢ st_s* S']
  | [g ⊢ tr_s* S1* S2*] ⇒ let [g ⊢ S1*'] = symmetric_step* [g ⊢ S1*] in
       let [g ⊢ S2*'] = symmetric_step* [g ⊢ S2*] in [g ⊢ tr_s* S2*' S1*']
;