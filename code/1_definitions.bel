%%% CCSK^P %%%

%%% Syntax %%%

% Names
LF names: type =
;

% Keys, implemented as natural numbers
LF keys: type =
  | z: keys
  | s: keys → keys
;

% Labels
LF labels: type =
  | inp: names → labels
  | out: names → labels
  | tau: labels
;

% Processes
LF proc: type =
  | null: proc                          % 0
  | pref: labels → proc → proc          % A.X
  | kpref: labels → keys → proc → proc  % A[k].X
  | sum: proc → proc → proc             % X+Y
  | par: proc → proc → proc             % X|Y
  | nu: (names → proc) → proc           % X\a
;

% Context for names
schema ctx = names;

% Equality of processes
LF eqp: proc → proc → type =
  | refp: eqp X X
;

% Equality of labels
LF eql: labels → labels → type =
  | refl: eql A A
;

% Equality of keys
LF eqk: keys → keys → type =
  | refk: eqk K K
;

% Strict order relation on keys (nats)
LF less: keys → keys → type =
  | lzero: {K:keys} less z (s K)
  | lsucc: less K M → less (s K) (s M)
;

% Inequality of keys
LF neq: keys → keys → type =
  | nless: less K M → neq K M
  | ngreat: less M K → neq K M
;


%%% Semantics %%%

% Proof keyed labels 
LF pr_lab: type =
  | pr_base: labels → keys → pr_lab
  | pr_suml: pr_lab → pr_lab
  | pr_sumr: pr_lab → pr_lab
  | pr_parl: pr_lab → pr_lab
  | pr_parr: pr_lab → pr_lab
  | pr_sync: pr_lab → pr_lab → pr_lab
;

% Label of a proof keyed label
LF lab: pr_lab → labels → type =
  | lab_base: lab (pr_base A K) A
  | lab_suml: lab T A → lab (pr_suml T) A
  | lab_sumr: lab T A → lab (pr_sumr T) A
  | lab_parl: lab T A → lab (pr_parl T) A
  | lab_parr: lab T A → lab (pr_parr T) A
  | lab_sync: lab (pr_sync T1 T2) tau
;

% Key of a proof keyed label
LF key: pr_lab → keys → type =
  | key_base: key (pr_base A K) K
  | key_suml: key T K → key (pr_suml T) K
  | key_sumr: key T K → key (pr_sumr T) K
  | key_parl: key T K → key (pr_parl T) K
  | key_parr: key T K → key (pr_parr T) K
  | key_sync: key T1 K → key (pr_sync T1 T2) K
;

% In the definition of pr_lab, we admit "spurious" proof labels <T1,T2> for any T1 and T2:
% however, according to the informal definition of proof keyed labels, <T1,T2> is defined 
% only for those T1 and T2 which have the same key and complementary labels.
% As a consequence, in this encoding, there exist proof keyed labels which are not labeling
% any transition: results like realization of each proof label do not hold anymore.
% We define a new type family characterizing only the "valid" proof keyed labels.

% Type family to encode valid proof labels
LF valid: pr_lab → type =
  | v_base: valid (pr_base A K)
  | v_suml: valid T → valid (pr_suml T)
  | v_sumr: valid T → valid (pr_sumr T)
  | v_parl: valid T → valid (pr_parl T)
  | v_parr: valid T → valid (pr_parr T)
  | v_synl: valid T1 → valid T2 → lab T1 (inp A) → key T1 K
          → lab T2 (out A) → key T2 K → valid (pr_sync T1 T2)
  | v_synr: valid T1 → valid T2 → lab T1 (out A) → key T1 K
          → lab T2 (inp A) → key T2 K → valid (pr_sync T1 T2)
;

% Standard processes
LF std: proc → type =
  | std_null: std null
  | std_pref: std X → std (pref A X)
  | std_sum: std X → std Y → std (sum X Y)
  | std_par: std X → std Y → std (par X Y)
  | std_nu: ({a:names} std (X a)) → std (nu X)
;

% Non occurrence of keys in processes
LF notin: keys → proc → type =
  | not_null: notin K null
  | not_pref: notin K X → notin K (pref A X)
  | not_kpref: neq K M → notin K X → notin K (kpref A M X)
  | not_sum: notin K X → notin K Y → notin K (sum X Y)
  | not_par: notin K X → notin K Y → notin K (par X Y)
  | not_nu: ({a:names} notin K (X a)) → notin K (nu X)
;


% Forward transitions
LF fstep: proc → pr_lab → proc → type =
  | fs_pref: std X → fstep (pref A X) (pr_base A K) (kpref A K X)
  | fs_kpref: fstep X T X' → key T M → neq K M
            → fstep (kpref A K X) T (kpref A K X')
  | fs_suml: fstep X T X' → std Y → fstep (sum X Y) (pr_suml T) (sum X' Y)
  | fs_sumr: fstep Y T Y' → std X → fstep (sum X Y) (pr_sumr T) (sum X Y')
  | fs_parl: fstep X T X' → key T K → notin K Y
           → fstep (par X Y) (pr_parl T) (par X' Y)
  | fs_parr: fstep Y T Y' → key T K → notin K X
           → fstep (par X Y) (pr_parr T) (par X Y')
  | fs_synl: fstep X T1 X' → lab T1 (inp L) → key T1 K
           → fstep Y T2 Y' → lab T2 (out L) → key T2 K
           → fstep (par X Y) (pr_sync T1 T2) (par X' Y')
  | fs_synr: fstep X T1 X' → lab T1 (out L) → key T1 K
           → fstep Y T2 Y' → lab T2 (inp L) → key T2 K
           → fstep (par X Y) (pr_sync T1 T2) (par X' Y')
  | fs_nu: ({a:names} fstep (X a) T (X' a)) → fstep (nu X) T (nu X')
;

% Backward transitions
LF bstep: proc → pr_lab → proc → type =
  | bs_pref: std X → bstep (kpref A K X) (pr_base A K) (pref A X)
  | bs_kpref: bstep X' T X → key T M → neq K M
            → bstep (kpref A K X') T (kpref A K X)
  | bs_suml: bstep X' T X → std Y → bstep (sum X' Y) (pr_suml T) (sum X Y)
  | bs_sumr: bstep Y' T Y → std X → bstep (sum X Y') (pr_sumr T) (sum X Y)
  | bs_parl: bstep X' T X → key T K → notin K Y
           → bstep (par X' Y) (pr_parl T) (par X Y)
  | bs_parr: bstep Y' T Y → key T K → notin K X
           → bstep (par X Y') (pr_parr T) (par X Y)
  | bs_synl: bstep X' T1 X → lab T1 (inp L) → key T1 K
           → bstep Y' T2 Y → lab T2 (out L) → key T2 K
           → bstep (par X' Y') (pr_sync T1 T2) (par X Y)
  | bs_synr: bstep X' T1 X → lab T1 (out L) → key T1 K
           → bstep Y' T2 Y → lab T2 (inp L) → key T2 K
           → bstep (par X' Y') (pr_sync T1 T2) (par X Y)
  | bs_nu: ({a:names} bstep (X' a) T (X a)) → bstep (nu X') T (nu X)
;

% Combined transitions
LF step: proc → pr_lab → proc → type =
  | fw: fstep X T X' → step X T X'
  | bw: bstep X' T X → step X' T X
;

% Paths
LF step*: proc → proc → type =
  | id_s*: step* X X
  | st_s*: step X T Y → step* X Y
  | tr_s*: step* X Y → step* Y Z → step* X Z
;

% Reachable processes
LF reachable: proc → type =
  | rch: std X → step* X Y → reachable Y
;

% Connected transitions
LF conn_tr: step X T1 X' → step Y T2 Y' → type =
  | ct: {S1:step X T1 X'}{S2: step Y T2 Y'} step* X Y' → conn_tr S1 S2
;


%%% Connectivity, dependence and independence of proof keyed labels %%%

% Connectivity
LF conn: pr_lab → pr_lab → type =
  | c_a1: conn (pr_base A K) T
  | c_a2: conn T (pr_base A K)
  | c_c1l: conn T1 T2 → conn (pr_suml T1) (pr_suml T2)
  | c_c1r: conn T1 T2 → conn (pr_sumr T1) (pr_sumr T2)
  | c_c2l: conn (pr_suml T1) (pr_sumr T2)
  | c_c2r: conn (pr_sumr T1) (pr_suml T2)
  | c_p1l: conn T1 T2 → conn (pr_parl T1) (pr_parl T2)
  | c_p1r: conn T1 T2 → conn (pr_parr T1) (pr_parr T2)
  | c_p2l: conn (pr_parl T1) (pr_parr T2)
  | c_p2r: conn (pr_parr T1) (pr_parl T2)
  | c_s1l: conn T TL → conn (pr_parl T) (pr_sync TL TR)
  | c_s1r: conn T TR → conn (pr_parr T) (pr_sync TL TR)
  | c_s2l: conn TL T → conn (pr_sync TL TR) (pr_parl T)
  | c_s2r: conn TR T → conn (pr_sync TL TR) (pr_parr T)
  | c_s3: conn T1 T1' → conn T2 T2' → conn (pr_sync T1 T2) (pr_sync T1' T2')
;

% Dependence
LF dep: pr_lab → pr_lab → type =
  | d_a1: dep (pr_base A K) T
  | d_a2: dep T (pr_base A K)
  | d_c1l: dep T1 T2 → dep (pr_suml T1) (pr_suml T2)
  | d_c1r: dep T1 T2 → dep (pr_sumr T1) (pr_sumr T2)
  | d_c2l: dep (pr_suml T1) (pr_sumr T2)
  | d_c2r: dep (pr_sumr T1) (pr_suml T2)
  | d_p1l: dep T1 T2 → dep (pr_parl T1) (pr_parl T2)
  | d_p1r: dep T1 T2 → dep (pr_parr T1) (pr_parr T2)
  | d_p2l: key T1 K → key T2 K → dep (pr_parl T1) (pr_parr T2)
  | d_p2r: key T1 K → key T2 K → dep (pr_parr T1) (pr_parl T2)
  | d_s1l: dep T TL → dep (pr_parl T) (pr_sync TL TR)
  | d_s1r: dep T TR → dep (pr_parr T) (pr_sync TL TR)
  | d_s2l: dep TL T → dep (pr_sync TL TR) (pr_parl T)
  | d_s2r: dep TR T → dep (pr_sync TL TR) (pr_parr T)
  | d_s3l: dep T1 T1' → conn T2 T2' → dep (pr_sync T1 T2) (pr_sync T1' T2')
  | d_s3r: conn T1 T1' → dep T2 T2' → dep (pr_sync T1 T2) (pr_sync T1' T2')
;

% Independence
LF indep: pr_lab → pr_lab → type =
  | i_c1l: indep T1 T2 → indep (pr_suml T1) (pr_suml T2)
  | i_c1r: indep T1 T2 → indep (pr_sumr T1) (pr_sumr T2)
  | i_p1l: indep T1 T2 → indep (pr_parl T1) (pr_parl T2)
  | i_p1r: indep T1 T2 → indep (pr_parr T1) (pr_parr T2)
  | i_p2l: key T1 K → key T2 M → neq K M → indep (pr_parl T1) (pr_parr T2)
  | i_p2r: key T1 K → key T2 M → neq K M → indep (pr_parr T1) (pr_parl T2)
  | i_s1l: indep T TL → indep (pr_parl T) (pr_sync TL TR)
  | i_s1r: indep T TR → indep (pr_parr T) (pr_sync TL TR)
  | i_s2l: indep TL T → indep (pr_sync TL TR) (pr_parl T)
  | i_s2r: indep TR T → indep (pr_sync TL TR) (pr_parr T)
  | i_s3: indep T1 T1' → indep T2 T2' → indep (pr_sync T1 T2) (pr_sync T1' T2')
;